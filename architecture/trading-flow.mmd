graph TB
    Start([System Started]) --> Orchestrator[WorkerOrchestrator Service]
    Orchestrator --> LoadConfig[Load Worker Configurations from DB]
    LoadConfig --> CheckMarkets{For Each Market Type}

    CheckMarkets --> InitAdapter[Initialize Market Adapter]
    InitAdapter --> CreateConnection[Create/Reuse Market Connection]
    CreateConnection --> ConnectWS[Connect WebSocket]
    ConnectWS --> Auth[Authenticate with Credentials]
    Auth --> Heartbeat[Start Heartbeat Service]
    Heartbeat --> Subscribe[Subscribe to Market Data Channels]

    Subscribe --> CreateWorker[Create MarketWorker Instance]
    CreateWorker --> StartWorker[Start Worker Processing Loop]
    StartWorker --> StreamData[Stream Market Data]

    StreamData --> MarketData{New Market Data Event}
    MarketData --> MessageProcessor[OkxMessageProcessor]
    MessageProcessor --> ValidateMsg{Valid Message?}
    ValidateMsg -->|No| DropMessage[Log & Drop]
    ValidateMsg -->|Yes| UpdateCache[Update MarketDataCache]

    UpdateCache --> WorkerProcess[Worker Processing Loop]
    WorkerProcess --> GetData[Get Data from Cache]
    GetData --> HasPipeline{Pipeline Configured?}

    HasPipeline -->|No| BasicProcess[Basic Processing <br/>Current State]
    HasPipeline -->|Yes| Pipeline[Enter Trading Pipeline]

    Pipeline --> Step1[1. Data Validation Step]
    Step1 --> ValidData{Valid Data?}
    ValidData -->|No| Skip[Skip Processing]
    ValidData -->|Yes| Step2[2. Risk Management Step]

    Step2 --> RiskCheck{Within Risk Limits?}
    RiskCheck -->|No| Stop[Stop Processing]
    RiskCheck -->|Yes| Step3[3. Signal Generation Step]

    Step3 --> Strategy[Execute Strategy.AnalyzeAsync]
    Strategy --> Signal{Trading Signal}
    Signal -->|NoAction| Wait[Wait for Next Data]
    Signal -->|Buy/Sell| Step4[4. Order Preparation Step]

    Step4 --> CalcParams[Calculate Order Parameters<br/>Size, Price, Type]
    CalcParams --> Step5[5. Pre-Execution Validation]

    Step5 --> FinalCheck{Final Checks<br/>Balance, Limits}
    FinalCheck -->|Fail| Abort[Abort Order]
    FinalCheck -->|Pass| Step6[6. Order Execution Step]

    Step6 --> HttpService[OkxHttpService]
    HttpService --> SendOrder[Send Order via REST API]
    SendOrder --> Response{Order Response}

    Response -->|Success| RecordSuccess[Save to Database]
    Response -->|Failure| RetryLogic{Retry Logic}
    RetryLogic -->|Retry| SendOrder
    RetryLogic -->|Give Up| RecordFailure[Log Failure]

    RecordSuccess --> UpdateState[Update Worker State]
    RecordFailure --> UpdateState
    Abort --> UpdateState
    Stop --> UpdateState
    Skip --> Wait
    BasicProcess --> Wait
    DropMessage --> MarketData

    UpdateState --> NotifyFrontend[Notification]
    NotifyFrontend --> Monitor[Monitor Position]
    Monitor --> ProcessingDelay[Await Processing Interval]
    ProcessingDelay --> MarketData
    Wait --> ProcessingDelay

    %% Parallel monitoring
    Orchestrator --> MonitorLoop[Synchronization Loop<br/>Every 10 seconds]
    MonitorLoop --> CheckWorkers{Check Worker Status}
    CheckWorkers --> AddMissing[Start Missing Workers]
    CheckWorkers --> RemoveExtra[Stop Extra Workers]
    CheckWorkers --> UpdateSubs[Update Subscriptions]
    AddMissing --> MonitorLoop
    RemoveExtra --> MonitorLoop
    UpdateSubs --> MonitorLoop

    style Start fill:#e1f5fe
    style Orchestrator fill:#fff3e0
    style Pipeline fill:#f3e5f5
    style Signal fill:#ffe0b2
    style Step6 fill:#e8f5e9
    style NotifyFrontend fill:#fce4ec
    style MonitorLoop fill:#e0f2f1
