sequenceDiagram
    participant API as API Controller
    participant Orch as Worker Orchestrator
    participant Creds as Credentials Provider
    participant Worker as Market Worker
    participant Adapter as OKX Market Adapter
    participant ConnMgr as Connection Manager
    participant SubMgr as Subscription Manager
    participant MsgProc as Message Processor
    participant WS as WebSocket Client
    participant Channel as Data Channel
    participant OKX as OKX Exchange
    Note over API, OKX: INITIALIZATION PHASE
    API ->> Orch: StartWorkerAsync(OKX, BTC-USDT, config)
    Orch ->> Creds: GetCredentialsAsync(OKX)
    Creds -->> Orch: MarketCredentials
    Note over Orch, Adapter: ADAPTER SETUP
    Orch ->> Adapter: ConnectAsync(credentials)
    Adapter ->> ConnMgr: ConnectAsync(uri)
    ConnMgr ->> WS: ConnectAsync(wss://ws.okx.com)
    WS ->> OKX: WebSocket Handshake
    OKX -->> WS: Connection Established
    WS -->> ConnMgr: Connected
    ConnMgr ->> ConnMgr: Start Heartbeat
    ConnMgr -->> Adapter: ConnectionState.Connected
    Note over Adapter, Channel: START DATA PROCESSING
    Adapter ->> Adapter: StartDataProcessing()
    Adapter ->> Channel: Create Channel<MarketDataEvent>
    Adapter ->> MsgProc: Initialize(channel)
    Note over Orch, Worker: WORKER CREATION
    Orch ->> Worker: new MarketWorker(adapter, pipeline)
    Orch ->> Worker: StartAsync(cancellationToken)
    Worker -->> Orch: WorkerId
    Note over Worker, OKX: SUBSCRIPTION PHASE
    Worker ->> Adapter: SubscribeAsync("BTC-USDT")
    Adapter ->> SubMgr: SubscribeAsync("books", "BTC-USDT")
    SubMgr ->> ConnMgr: SendAsync(subscription_request)
    ConnMgr ->> WS: SendAsync({op: "subscribe"})
    WS ->> OKX: Subscribe Request
    OKX -->> WS: Subscription Confirmed
    Note over OKX, Worker: MARKET DATA FLOW
    loop Market Data Stream
        OKX ->> WS: Market Data (books)
        WS ->> WS: OnMessageReceived Event
        WS ->> MsgProc: ProcessMessageAsync(message)
        MsgProc ->> MsgProc: Parse & Validate
        alt Valid Market Data
            MsgProc ->> MsgProc: Check Staleness
            MsgProc ->> Channel: Writer.TryWrite(MarketDataEvent)
            Note over Channel: Buffered Channel (1000 capacity)
            Channel ->> Adapter: Reader.ReadAsync()
            Adapter ->> Adapter: UpdateLatestData(event)

            alt Worker Using Streaming
                Adapter ->> Worker: yield return MarketDataEvent
                Worker ->> Worker: ProcessThroughPipeline()
            else Worker Using Polling
                Worker ->> Adapter: GetData("BTC-USDT")
                Adapter -->> Worker: Latest MarketData
                Worker ->> Worker: ProcessThroughPipeline()
            end
        else Invalid/Stale Data
            MsgProc ->> MsgProc: Log & Discard
        end
    end

    Note over WS, ConnMgr: CONNECTION FAILURE HANDLING
    WS --x OKX: Connection Lost
    WS ->> ConnMgr: StateChanged(Disconnected)
    ConnMgr ->> ConnMgr: StartReconnect()
    loop Reconnection Loop
        ConnMgr ->> ConnMgr: Wait(5 seconds)
        ConnMgr ->> WS: ConnectAsync()
        alt Reconnection Success
            WS -->> ConnMgr: Connected
            ConnMgr ->> SubMgr: OnConnectionStateChanged(Connected)
            SubMgr ->> SubMgr: Resubscribe All
            SubMgr ->> ConnMgr: SendAsync(all subscriptions)
        else Reconnection Failed
            ConnMgr ->> ConnMgr: Continue Loop
        end
    end
